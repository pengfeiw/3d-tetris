{"version":3,"sources":["data/shaderData.ts","gl/shader.ts","components/mainScreen/util/painter.ts","data/glsl_source.ts","components/mainScreen/util/shape.ts","components/mainScreen/util/shapeCreator.ts","tetris.interface.ts","components/realtimeInfo/index.tsx","components/mainScreen/index.tsx","components/setting/index.tsx","components/gameStatus/index.tsx","App.tsx","index.tsx"],"names":["columnCount","rowCount","gridVertexs","data","i","push","top","bottom","left","right","getGridVertexs","cubeVertexs","cubeNormals","randomCubeColor","r","Math","random","g","b","color","length","createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","Shader","vertexShaderSource","fragmentShaderSource","program","this","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","useProgram","name","value","location","getUniformLocation","uniform1f","x","y","uniform2f","z","uniform3f","w","uniform4f","uniformMatrix3fv","uniformMatrix4fv","gameRunData","cellDatas","activeShape","activeShapePos","lightColor","lightDirection","settledCubeColor","activeCubeColor","gameSettings","distance","rotateX","viewMatrix","mat4","lookAt","create","modelRotateMatrix","rotate","glMatrix","toRadian","drawCube","cubeColor","posBuffer","createBuffer","posLocation","getAttribLocation","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","normalBuffer","normalLocation","projection","perspective","PI","canvas","width","height","setMat4","setFloat3","row","curRow","col","colorBuffer","colorLocation","model","translate","drawArrays","TRIANGLES","draw","viewport","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","LINES","drawGridLine","cellData","rowData","j","shapeData","pos","window","requestAnimationFrame","Shape","datas","shapeIndex","round","ShapeCreator","shapes","shapeName","shapeNames","Object","keys","randomShapeName","floor","createShape","creator","instance","registerShape","GameStatus","RealtimeInfo","props","nextShape","score","nextShapeColor","status","setStatus","canvasRef","useRef","useEffect","current","clientWidth","clientHeight","ctx","getContext","clearRect","fillStyle","cellW","cellH","fillRect","btn1Disabled","UNSTART","OVER","btn2Disabled","operateBtnDisabled","RUNNING","className","ref","Button","disabled","variant","onClick","PAUSE","dispatchEvent","KeyboardEvent","key","getCellValueByCoord","coordLd","binaryString","parseInt","flicker","MainScreen","gameStatus","setGameStatus","setScore","useState","setCellDatas","setActiveShape","activeShapeCoord","setActiveShapeCoord","activeShapeColor","setActiveShapeColor","createRandomShape","setNextShape","setNextShapeColor","speed","setSpeed","preStatusRef","setNextRandomShape","shape","coordX","HEIGHT","keyHandle","event","coord","getAfterOneRotate_Data","addEventListener","removeEventListener","intervalId","setInterval","clearInterval","Array","WIDTH","fill","getInitData","resizeCanvas","displayWidth","displayHeight","areaValue","shapePos","updateData","resultData","JSON","parse","stringify","cellValue","updateCellValueByCoord","eliminateRowIndex","every","item","isDraw","setTimeout","delRowIndex","splice","ceil","min","settingValue","max","Setting","open","setOpen","setDistance","setRotate","Drawer","anchor","onClose","Slider","onChange","e","title","href","setTitle","Status","getTitle","Paper","Tetris","settingOpen","setSettingOpen","listener","Error","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.9d535574.chunk.js","sourcesContent":["// 格子尺寸：10 X 20\n// 立方体边长为10\n\nexport const columnCount = 10; // 列数\nexport const rowCount = 20; // 行数\n\n/**\n * 获得格子顶点数据\n * @returns \n */\nconst getGridVertexs = (): number[] => {\n    const top = rowCount / 2, bottom = -rowCount / 2, left = -columnCount / 2, right = columnCount / 2;\n    const data: number[] = [];\n\n    // columns\n    const miny = bottom * 10, maxy = top * 10;\n    for (let i = left; i <= right; i++) {\n        data.push(i * 10, maxy, 0);\n        data.push(i * 10, miny, 0);\n    }\n\n    // rows\n    const minx = left * 10, maxx = right * 10;\n    for (let i = bottom; i <= top; i++) {\n        data.push(minx, i * 10, 0);\n        data.push(maxx, i * 10, 0);\n    }\n\n    return data;\n};\n\nexport const gridVertexs = getGridVertexs();\n\n/**\n * 立方体顶点数据，表示shape的一个block\n */\nexport const cubeVertexs = [\n    // near\n    -5, -5, 10,\n    5, -5, 10,\n    5, 5, 10,\n    5, 5, 10,\n    -5, 5, 10,\n    -5, -5, 10,\n    // far\n    -5, -5, 0,\n    -5, 5, 0,\n    5, 5, 0,\n    5, 5, 0,\n    5, -5, 0,\n    -5, -5, 0,\n    // left\n    -5, 5, 0,\n    -5, -5, 0,\n    -5, -5, 10,\n    -5, -5, 10,\n    -5, 5, 10,\n    -5, 5, 0,\n    // right\n    5, 5, 0,\n    5, 5, 10,\n    5, -5, 10,\n    5, -5, 10,\n    5, -5, 0,\n    5, 5, 0,\n    // bottom\n    -5, -5, 10,\n    -5, -5, 0,\n    5, -5, 0,\n    5, -5, 0,\n    5, -5, 10,\n    -5, -5, 10,\n    // top\n    -5, 5, 10,\n    5, 5, 10,\n    5, 5, 0,\n    5, 5, 0,\n    -5, 5, 0,\n    -5, 5, 10\n];\n\n// cube的法向量\nexport const cubeNormals = [\n    // near\n    0, 0, 1,\n    0, 0, 1,\n    0, 0, 1,\n    0, 0, 1,\n    0, 0, 1,\n    0, 0, 1,\n    // far\n    0, 0, -1,\n    0, 0, -1,\n    0, 0, -1,\n    0, 0, -1,\n    0, 0, -1,\n    0, 0, -1,\n    // left\n    -1, 0, 0,\n    -1, 0, 0,\n    -1, 0, 0,\n    -1, 0, 0,\n    -1, 0, 0,\n    -1, 0, 0,\n    // right\n    1, 0, 0,\n    1, 0, 0,\n    1, 0, 0,\n    1, 0, 0,\n    1, 0, 0,\n    1, 0, 0,\n    // bottom\n    0, -1, 0,\n    0, -1, 0,\n    0, -1, 0,\n    0, -1, 0,\n    0, -1, 0,\n    0, -1, 0,\n    // top\n    0, 1, 0,\n    0, 1, 0,\n    0, 1, 0,\n    0, 1, 0,\n    0, 1, 0,\n    0, 1, 0\n];\n\nexport const randomCubeColor = () => {\n    const r = Math.random();\n    const g = Math.random();\n    const b = Math.random();\n    const color = [];\n    for (let i = 0; i < cubeVertexs.length / 3; i++) {\n        color.push(r, g, b);\n    }\n    return color;\n};\n","const createShader = (gl: WebGLRenderingContext, type: number, source: string) => {\n    var shader = gl.createShader(type) as WebGLShader;\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    // 检测是否着色器是否编译成功\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n    if (!success) {\n        throw \"colud not compile shader: \" + gl.getShaderInfoLog(shader);\n    }\n\n    return shader;\n};\n\n/**\n * 链接着顶点着色器和片段着色器，生成着色程序\n * @param gl  \n * @param vertexShader \n * @param fragmentShader \n * @returns WebGLProgram\n */\nconst createProgram = (gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader) => {\n    var program = gl.createProgram() as WebGLProgram;\n    \n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n    if (!success) {\n        throw \"colud not link shader: \" + gl.getProgramInfoLog(program); \n    }\n\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n    return program;\n};\n\n/**\n * 封装的着色器程序类\n */\nclass Shader {\n    public gl: WebGLRenderingContext;\n    public program: WebGLProgram;\n    public constructor(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n        this.gl = gl;\n        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n        this.program = createProgram(gl, vertexShader, fragmentShader);\n    }\n    public useProgram() {\n        this.gl.useProgram(this.program);\n    }\n    // #region uniform工具函数  https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glUniform.xml\n    public setFloat(name: string, value: number) {\n        const location = this.gl.getUniformLocation(this.program, name);\n        this.gl.uniform1f(location, value);\n    }\n    public setFloat2(name: string, x: number, y: number) {\n        const location = this.gl.getUniformLocation(this.program, name);\n        this.gl.uniform2f(location, x, y);\n    }\n    public setFloat3(name: string, x: number, y: number, z: number) {\n        const location = this.gl.getUniformLocation(this.program, name);\n        this.gl.uniform3f(location, x, y, z);\n    }\n    public setFloat4(name: string, x: number, y: number, z: number, w: number) {\n        const location = this.gl.getUniformLocation(this.program, name);\n        this.gl.uniform4f(location, x, y, z, w);\n    }\n    public setMat3(name: string, value: Float32Array) {\n        const location = this.gl.getUniformLocation(this.program, name);\n        this.gl.uniformMatrix3fv(location, false, value); // transpose参数必须为false\n    }\n    public setMat4(name: string, value: Float32Array) {\n        const location = this.gl.getUniformLocation(this.program, name);\n        this.gl.uniformMatrix4fv(location, false, value); // transpose参数必须为false\n    }\n    // #endregion\n}\n\nexport default Shader;\n","import {glMatrix, mat4, vec3} from \"gl-matrix\";\nimport {gridVertexs, cubeVertexs, randomCubeColor, cubeNormals} from \"../../../data/shaderData\";\nimport {grid_vertex_source, cube_vertex_source, grid_fragment_source, cube_fragment_source} from \"../../../data/glsl_source\";\nimport Shader from \"../../../gl/shader\";\nimport {columnCount, rowCount} from \"../../../data/shaderData\";\nimport Shape from \"./shape\";\n\ninterface GameRunData {\n    cellDatas: (0 | 1)[][]; // 当前所有格子数据\n    activeShape: Shape | null; // 活动的shape\n    activeShapePos: {x: number; y: number}, // 活动的shape的左下角坐标\n    lightColor: vec3; // 光照颜色\n    lightDirection: vec3; // 光照方向\n    settledCubeColor: vec3; // 已定的cube颜色\n    activeCubeColor: vec3; // 活动的cube颜色\n}\n\ninterface GameSetting {\n    distance: number;\n    rotateX: number;\n}\n\nexport const gameRunData: GameRunData = {\n    cellDatas: [],\n    activeShape: null,\n    activeShapePos: {\n        x: 0, y: 0\n    },\n    lightColor: [1, 1, 1],\n    lightDirection: [0, 0.8, -2],\n    settledCubeColor: [0.92, 0.15, 0.02], // [0.36, 0.42, 0.60],\n    activeCubeColor: [1, 1, 1]\n};\nexport const gameSettings: GameSetting = {\n    distance: 200,\n    rotateX: 40\n};\n\nconst viewMatrix = () => {\n    const view = mat4.lookAt(mat4.create(), [0, 0, gameSettings.distance + 100], [0, 0, 0], [0, 1, 0]);\n    return view;\n};\n\nconst modelRotateMatrix = () => {\n    const model = mat4.rotate(mat4.create(), mat4.create(), glMatrix.toRadian(gameSettings.rotateX), [-1, 0, 0]);\n    return model;\n};\n\nconst drawGridLine = (gl: WebGLRenderingContext) => {\n    const shader = new Shader(gl, grid_vertex_source, grid_fragment_source);\n    shader.useProgram();\n\n    // set vertexs\n    const posBuffer = gl.createBuffer();\n    const posLocation = gl.getAttribLocation(shader.program, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, posBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(gridVertexs), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(posLocation, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(posLocation);\n\n    // set color\n    shader.setFloat3(\"u_color\", 1, 1, 1);\n\n    // set matrix\n    const projection = mat4.perspective(mat4.create(), Math.PI * 0.25, gl.canvas.width / gl.canvas.height, 0.1, 1000);\n    shader.setMat4(\"u_model\", new Float32Array(modelRotateMatrix()));\n    shader.setMat4(\"u_projection\", new Float32Array(projection));\n    shader.setMat4(\"u_view\", new Float32Array(viewMatrix()));\n    \n    gl.drawArrays(gl.LINES, 0, gridVertexs.length / 3);\n};\n\n/**\n * draw cube\n * @param gl WebGLRenderingContext.\n * @param cellDatas the value of every cell, the value must be 0 or 1.\n * @param lightColor the color of light.\n * @param lightDirection the direction of light.\n */\nconst drawCube = (gl: WebGLRenderingContext, cellDatas: (0 | 1)[][], lightColor: vec3, lightDirection: vec3, cubeColor?: vec3) => {\n    const shader = new Shader(gl, cube_vertex_source, cube_fragment_source);\n    shader.useProgram();\n\n    // set cube vertexs\n    const posBuffer = gl.createBuffer();\n    const posLocation = gl.getAttribLocation(shader.program, \"a_position\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, posBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(cubeVertexs), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(posLocation, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(posLocation);\n\n    // set cube normals\n    const normalBuffer = gl.createBuffer();\n    const normalLocation = gl.getAttribLocation(shader.program, \"a_normal\");\n    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(cubeNormals), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(normalLocation, 3, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(normalLocation);\n\n    const projection = mat4.perspective(mat4.create(), Math.PI * 0.25, gl.canvas.width / gl.canvas.height, 0.1, 1000);\n    shader.setMat4(\"u_view\", new Float32Array(viewMatrix()));\n    shader.setMat4(\"u_projection\", new Float32Array(projection));\n    shader.setFloat3(\"u_lightColor\", lightColor[0], lightColor[1], lightColor[2]);\n    shader.setFloat3(\"u_lightDirectionReverse\", -lightDirection[0], -lightDirection[1], -lightDirection[2]);\n\n    for (let row = 0; row < cellDatas.length; row++) {\n        const curRow = cellDatas[row];\n        for (let col = 0; col < curRow.length; col++) {\n            const cellValue = curRow[col];\n            if (cellValue === 1) {\n                // set color\n                const colorBuffer = gl.createBuffer();\n                const colorLocation = gl.getAttribLocation(shader.program, \"a_color\");\n                gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n                if (cubeColor) {\n                    const color: number[] = [];\n                    for (let i = 0; i < cubeVertexs.length / 3; i++) {\n                        color.push(cubeColor[0], cubeColor[1], cubeColor[2]);\n                    }\n                    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(color), gl.STATIC_DRAW);\n                } else {\n                    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(randomCubeColor()), gl.STATIC_DRAW);\n                }\n                gl.vertexAttribPointer(colorLocation, 3, gl.FLOAT, false, 0, 0);\n                gl.enableVertexAttribArray(colorLocation);\n\n                // set matrix\n                const model = mat4.translate(mat4.create(), modelRotateMatrix(), [10 * (col - (columnCount / 2 - 0.5)), 10 * (row - (rowCount / 2 - 0.5)), 0]);\n                shader.setMat4(\"u_model\", new Float32Array(model));\n\n                gl.drawArrays(gl.TRIANGLES, 0, 36);\n            }\n        }\n    }\n};\n\nexport const draw = (gl: WebGLRenderingContext) => {\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    gl.enable(gl.DEPTH_TEST);\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    gl.clearColor(0.19, 0.22, 0.25, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    \n    // draw grid line\n    drawGridLine(gl);\n    // draw settled cube\n    drawCube(gl, gameRunData.cellDatas, gameRunData.lightColor, gameRunData.lightDirection, gameRunData.settledCubeColor);\n\n    // draw active cube\n    if (gameRunData.activeShape) {\n        const cellData:(0 | 1)[][] = [];\n        for (let i = 0; i < rowCount + 4; i++) {\n            const rowData: (0 | 1)[] = [];\n            for (let j = 0; j < columnCount; j++) {\n                rowData.push(0);\n            }\n            cellData.push(rowData);\n        }\n\n        let shapeData = gameRunData.activeShape.data;\n        const pos = gameRunData.activeShapePos;\n        for (let i = pos.y + 3; i >= pos.y; i--) {\n            for (let j = pos.x; j < pos.x + 4; j++) {\n                if (i >= 0 && j >= 0) {\n                    cellData[i][j] = (shapeData & 0x8000) === 0 ? 0 : 1; \n                }\n                shapeData <<= 1;\n            }\n        }\n        \n        drawCube(gl, cellData, gameRunData.lightColor, gameRunData.lightDirection, gameRunData.activeCubeColor);\n    }\n\n    window.requestAnimationFrame(() => {\n        draw(gl);\n    });\n};\n","export const cube_vertex_source =\n    `#version 300 es\n    in vec4 a_position; // 立方体顶点数据\n    in vec3 a_color;\n    in vec3 a_normal; // 立方体法向量\n\n    uniform mat4 u_projection;\n    uniform mat4 u_model;\n    uniform mat4 u_view;\n\n    out vec3 v_color;\n    out vec3 v_normal;\n\n    void main() {\n        gl_Position = u_projection * u_view * u_model * a_position;\n        v_color = a_color;\n        v_normal = mat3(u_model) * a_normal;\n    }\n`;\n\n\nexport const cube_fragment_source =\n    `#version 300 es\n    precision highp float;\n\n    out vec4 FragColor;\n\n    uniform vec3 u_lightDirectionReverse; // 光照的逆向量\n    uniform vec3 u_lightColor; // 光照颜色\n\n    in vec3 v_color; // 立方体颜色\n    in vec3 v_normal; // 法向量\n\n    void main() {\n        vec3 normal = normalize(v_normal);\n        vec3 lightDirectionReverse = normalize(u_lightDirectionReverse);\n        float light = dot(normal, lightDirectionReverse);\n\n        FragColor = vec4(v_color * u_lightColor, 1.0);\n        FragColor.rgb *= light;\n    }\n`;\n\nexport const grid_vertex_source =\n    `#version 300 es\n    in vec4 a_position;\n\n    uniform vec3 u_color;\n    uniform mat4 u_projection;\n    uniform mat4 u_model;\n    uniform mat4 u_view;\n\n    out vec3 v_color;\n\n    void main() {\n        gl_Position = u_projection * u_view * u_model * a_position;\n        v_color = u_color;\n    }\n`;\n\nexport const grid_fragment_source =\n    `#version 300 es\n    precision highp float;\n    out vec4 FragColor;\n\n    in vec3 v_color;\n\n    void main() {\n        FragColor = vec4(v_color, 1.0);\n    }\n`;\n","export type ShapeData = [number, number, number, number];\n\nclass Shape {\n    private datas: ShapeData\n    private shapeIndex = 0;\n    public constructor(datas: ShapeData) {\n        this.datas = datas;\n        this.shapeIndex = Math.round(Math.random() * 3);\n    }\n    public rotate() {\n        this.shapeIndex++;\n        this.shapeIndex %= 4;\n    }\n    /**\n     * 获取当前data\n     */\n    public get data() {\n        return this.datas[this.shapeIndex];\n    }\n    /**\n     * 获取旋转一次后的data\n     */\n    public getAfterOneRotate_Data() {\n        return this.datas[(this.shapeIndex + 1) % 4];\n    }\n}\n\nexport default Shape;\n","import Shape, {ShapeData} from \"./shape\";\nexport const shapeO: ShapeData = [0x0660, 0x0660, 0x0660, 0x0660];\nexport const shapeI: ShapeData = [0x4444, 0x0F00, 0x4444, 0x0F00];\nexport const shapeZ: ShapeData = [0x0c60, 0x2640, 0x0c60, 0x2640];\nexport const shapeS: ShapeData = [0x0360, 0x4620, 0x0360, 0x4620];\nexport const shapeL: ShapeData = [0x4460, 0x0E80, 0x6220, 0x0170];\nexport const shapeJ: ShapeData = [0x2260, 0x08E0, 0x6440, 0x0710];\nexport const shapeT: ShapeData = [0x04E0, 0x4640, 0x0720, 0x2620];\n\ntype ShapeName = \"O\" | \"I\" | \"Z\" | \"S\" | \"L\" | \"J\" | \"T\";\n\nclass ShapeCreator {\n    private static creator = new ShapeCreator();\n    public static get instance() {\n        return ShapeCreator.creator;\n    }\n    private constructor() {\n        //\n    }\n    private shapes: {[name: string]: ShapeData} = {};\n    public registerShape(name: ShapeName, data: ShapeData) {\n        if (!this.shapes[name]) {\n            this.shapes[name] = data;\n        }\n    }\n    public createShape(shapeName: ShapeName) {\n        if (this.shapes[shapeName]) {\n            return new Shape(this.shapes[shapeName]);\n        }\n    }\n    public createRandomShape() {\n        const shapeNames = Object.keys(this.shapes);\n\n        const randomShapeName = shapeNames[Math.floor(Math.random() * shapeNames.length)];\n        return this.createShape(randomShapeName as ShapeName);\n    }\n}\n\nconst creator = ShapeCreator.instance;\n\ncreator.registerShape(\"O\", shapeO);\ncreator.registerShape(\"I\", shapeI);\ncreator.registerShape(\"Z\", shapeZ);\ncreator.registerShape(\"S\", shapeS);\ncreator.registerShape(\"L\", shapeL);\ncreator.registerShape(\"J\", shapeJ);\ncreator.registerShape(\"T\", shapeT);\n\nexport default creator;\n","export enum GameStatus {\n    UNSTART,\n    RUNNING,\n    PAUSE,\n    OVER\n}\n","import {vec3} from \"gl-matrix\";\nimport React, {FC} from \"react\";\nimport {useEffect} from \"react\";\nimport {useRef} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Shape from \"../mainScreen/util/shape\";\nimport \"./index.less\";\nimport {GameStatus} from \"../../tetris.interface\";\n\ninterface RealtimeInfoProps {\n    nextShape?: Shape;\n    nextShapeColor: vec3;\n    score: number;\n    status: GameStatus;\n    setStatus: React.Dispatch<React.SetStateAction<GameStatus>>;\n}\n\nconst RealtimeInfo: FC<RealtimeInfoProps> = (props) => {\n    const {nextShape, score, nextShapeColor, status, setStatus} = props;\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            canvas.width = canvas.clientWidth;\n            canvas.height = canvas.clientHeight;\n\n            const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n            if (nextShape) {\n                ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);\n\n                let shapeData = nextShape.data;\n                ctx.fillStyle = `rgb(${Math.round(255 * nextShapeColor[0])}, ${Math.round(255 * nextShapeColor[1])}, ${Math.round(255 * nextShapeColor[2])})`;\n                const cellW = canvas.clientWidth / 4;\n                const cellH = canvas.clientHeight / 4;\n                for (let i = 0; i < 4; i++) {\n                    for (let j = 0; j < 4; j++) {\n                        const res = shapeData & 0x8000;\n                        if (res !== 0) {\n                            ctx.fillRect(cellW * j, cellH * i, cellW, cellH);\n                        }\n\n                        shapeData <<= 1;\n                    }\n                }\n            }\n        }\n    }, [canvasRef, nextShape]);\n\n    const btn1Click = () => {\n        setStatus(GameStatus.RUNNING);\n    };\n\n    const btn2Click = () => {\n        if (status === GameStatus.RUNNING) {\n            setStatus(GameStatus.PAUSE);\n            return;\n        }\n        if (status === GameStatus.PAUSE) {\n            setStatus(GameStatus.RUNNING);\n            return;\n        }\n    };\n\n    const btnLeftClick = () => {\n        window.dispatchEvent(new KeyboardEvent(\"keydown\", {key: \"ArrowLeft\"}));\n    };\n    const btnRightClick = () => {\n        window.dispatchEvent(new KeyboardEvent(\"keydown\", {key: \"ArrowRight\"}));\n    };\n    const btnSpeedClick = () => {\n        window.dispatchEvent(new KeyboardEvent(\"keydown\", {key: \"ArrowDown\"}));\n    };\n    const btnRotateClick = () => {\n        window.dispatchEvent(new KeyboardEvent(\"keydown\", {key: \"ArrowUp\"}));\n    };\n\n    const btn1Disabled = !(status === GameStatus.UNSTART || status === GameStatus.OVER);\n    const btn2Disabled = !btn1Disabled;\n    const operateBtnDisabled = !(status === GameStatus.RUNNING);\n\n    return (\n        <div className=\"realtimeInfo\">\n            <canvas className=\"preview-canvas\" ref={canvasRef} />\n            <div className=\"info\">\n                <div className=\"info-item\">\n                    <span className=\"label\">score: </span>\n                    <span className=\"value\">{score}</span>\n                </div>\n            </div>\n            <div className=\"buttons\">\n                <div className=\"status-button\">\n                    <Button className=\"button\" disabled={btn1Disabled} variant=\"contained\" onClick={btn1Click}>{status === GameStatus.UNSTART ? \"Start\" : \"Restart\"}</Button>\n                    <Button className=\"button\" disabled={btn2Disabled} variant=\"contained\" onClick={btn2Click}>{status === GameStatus.RUNNING ? \"Pause\" : \"Continue\"}</Button>\n                </div>\n                <div className=\"operate-button\">\n                    <div className=\"top\">\n                        <Button className=\"button\" disabled={operateBtnDisabled} variant=\"contained\" onClick={btnLeftClick}>Left</Button>\n                        <Button className=\"button\" disabled={operateBtnDisabled} variant=\"contained\" onClick={btnRightClick}>Right</Button>\n                    </div>\n                    <div className=\"bottom\">\n                        <Button className=\"button\" disabled={operateBtnDisabled} variant=\"contained\" onClick={btnRotateClick}>Rotate</Button>\n                        <Button className=\"button\" disabled={operateBtnDisabled} variant=\"contained\" onClick={btnSpeedClick}>Speed</Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RealtimeInfo;\n","import React, {useRef, useState} from \"react\";\nimport {useEffect} from \"react\";\nimport {draw, gameRunData} from \"./util/painter\";\nimport {columnCount, columnCount as WIDTH, rowCount as HEIGHT} from \"../../data/shaderData\";\nimport ShapeCreator from \"./util/shapeCreator\";\nimport Shape from \"./util/shape\";\nimport {GameStatus} from \"../../tetris.interface\";\nimport {vec3} from \"gl-matrix\";\nimport \"./index.less\";\nimport RealtimeInfo from \"../realtimeInfo\";\n\ntype CellData = (0 | 1)[][];\ninterface MainScreenProps {\n    gameStatus: GameStatus;\n    setGameStatus: React.Dispatch<React.SetStateAction<GameStatus>>;\n    score: number;\n    setScore: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst getInitData = () => {\n    const data: CellData = [];\n    for (let i = 0; i < HEIGHT; i++) {\n        const rowData: 0 | 1[] = Array(WIDTH).fill(0);\n        data.push(rowData);\n    }\n    // // // test data\n    // let index = 1;\n    // for (let i = 0; i < data.length; i++) {\n    //     for (let j = 0; j < data[i].length; j++) {\n    //         data[i][j] = index % 2 as 0 | 1;\n    //         index += 1;\n    //     }\n    // }\n    return data;\n};\n\n/**\n * 获取网格中一个4x4的方块的值组成的数\n * @param coordLd 要获取的4x4区域的左下角\n */\nconst getCellValueByCoord = (cellDatas: CellData, coordLd: {x: number, y: number}) => {\n    var binaryString = \"\";\n    for (let i = coordLd.y + 3; i >= coordLd.y; i--) {\n        if (i < 0) {\n            binaryString += \"1111\";\n        } else if (i >= cellDatas.length) {\n            for (let j = coordLd.x; j < coordLd.x + 4; j++) {\n                if (j < 0 || j >= columnCount) {\n                    binaryString += \"1\";\n                } else {\n                    binaryString += \"0\";\n                }\n            }\n        } else {\n            for (let j = coordLd.x; j < coordLd.x + 4; j++) {\n                if (j >= 0 && j < cellDatas[i].length) {\n                    binaryString += cellDatas[i][j];\n                } else {\n                    binaryString += \"1\";\n                }\n            }\n        }\n    }\n\n    return parseInt(binaryString, 2);\n};\n\n/**\n * 使用一个4x4的方块区域值，更新cellDatas\n * @param cellDatas 要更新的CellData\n * @param coordLd 4x4方块区域的左下角坐标\n * @param value 需要更新的值\n */\nconst updateCellValueByCoord = (cellDatas: CellData, coordLd: {x: number, y: number}, value: number) => {\n    var resultData: CellData = [];\n    resultData = JSON.parse(JSON.stringify(cellDatas)) as CellData;\n\n    for (let i = coordLd.y; i < coordLd.y + 4; i++) {\n        if (i >= 0 && i < cellDatas.length) {\n            for (let j = coordLd.x + 3; j >= coordLd.x; j--) {\n                if (j >= 0 && j < cellDatas[i].length) {\n                    const cellValue = value & 1;\n                    if (cellValue === 1) {\n                        resultData[i][j] = cellValue;\n                    }\n                }\n                value >>= 1;\n            }\n        } else {\n            value >>= 4;\n        }\n    }\n\n    return resultData;\n};\n\nvar flicker = false;\n\nconst MainScreen: React.FC<MainScreenProps> = (props) => {\n    const {gameStatus, setGameStatus, score, setScore} = props;\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [cellDatas, setCellDatas] = useState<CellData>([]);\n    const [activeShape, setActiveShape] = useState<Shape>();\n    const [activeShapeCoord, setActiveShapeCoord] = useState<{x: number, y: number}>({x: 0, y: 0}); // 当前活动的shape左下角坐标\n    const [activeShapeColor, setActiveShapeColor] = useState<vec3>([1, 1, 1]);\n\n    const [nextShape, setNextShape] = useState<Shape | undefined>(ShapeCreator.createRandomShape() as Shape);\n    const [nextShapeColor, setNextShapeColor] = useState<vec3>([Math.random(), Math.random(), Math.random()]);\n\n    const [speed, setSpeed] = useState<number>(1);\n    const preStatusRef = useRef<GameStatus>(gameStatus); // 前一个状态\n\n    /**\n     * 设置随机block\n     */\n    const setNextRandomShape = () => {\n        const shape = ShapeCreator.createRandomShape();\n        setNextShape(shape as Shape);\n        const r = Math.random();\n        const g = Math.random();\n        const b = Math.random();\n        setNextShapeColor([r, g, b]);\n        const coordX = Math.round(Math.random() * (WIDTH - 4));\n        setActiveShapeCoord({x: coordX, y: HEIGHT});\n\n        setActiveShape(nextShape);\n        setActiveShapeColor(nextShapeColor);\n    };\n\n    // 添加键盘事件\n    useEffect(() => {\n        if (activeShape) {\n            const keyHandle = (event: KeyboardEvent) => {\n                switch (event.key) {\n                    case \"ArrowDown\":\n                        setActiveShapeCoord((coord) => ({x: coord.x, y: coord.y - 1}));\n                        break;\n                    case \"ArrowLeft\":\n                        setActiveShapeCoord((coord) => {\n                            if (coord.y >= HEIGHT) return coord;\n                            const cellValue = getCellValueByCoord(cellDatas, {x: coord.x - 1, y: coord.y});\n                            if ((cellValue & activeShape.data) === 0) {\n                                return {\n                                    x: coord.x - 1,\n                                    y: coord.y\n                                };\n                            } else {\n                                return coord;\n                            }\n                        });\n                        break;\n                    case \"ArrowRight\":\n                        setActiveShapeCoord((coord) => {\n                            if (coord.y >= HEIGHT) return coord;\n                            const cellValue = getCellValueByCoord(cellDatas, {x: coord.x + 1, y: coord.y});\n                            if ((cellValue & activeShape.data) === 0) {\n                                return {\n                                    x: coord.x + 1,\n                                    y: coord.y\n                                };\n                            } else {\n                                return coord;\n                            }\n                        });\n                        break;\n                    case \"ArrowUp\":\n                        const shapeData = activeShape.getAfterOneRotate_Data();\n                        const cellValue = getCellValueByCoord(cellDatas, activeShapeCoord);\n                        if ((cellValue & shapeData) === 0) {\n                            activeShape.rotate();\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            };\n            window.addEventListener(\"keydown\", keyHandle);\n            return () => {\n                window.removeEventListener(\"keydown\", keyHandle);\n            }\n        }\n    }, [activeShape, activeShapeCoord]);\n\n    // 初始时，设置随机block\n    useEffect(() => {\n        // setRandomShape();\n        setNextRandomShape();\n    }, []);\n\n    // block自动下落，下落速度由speed控制\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            if (gameStatus === GameStatus.RUNNING) {\n                setActiveShapeCoord((coord) => ({x: coord.x, y: coord.y - 1}));\n            }\n        }, 1000 / speed);\n\n        return () => {\n            clearInterval(intervalId);\n        }\n    }, [speed, gameStatus]);\n\n    // 初始化cellDatas\n    useEffect(() => {\n        if ((preStatusRef.current === GameStatus.OVER || preStatusRef.current === GameStatus.UNSTART) && gameStatus === GameStatus.RUNNING) {\n            setCellDatas(getInitData());\n        }\n        preStatusRef.current = gameStatus;\n    }, [gameStatus]);\n\n    // 监听窗口resize事件，改变canvas尺寸\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (canvas) {\n            const resizeCanvas = () => {\n                const displayWidth = canvas.clientWidth;\n                const displayHeight = canvas.clientHeight;\n\n                if (canvas.width != displayWidth || canvas.height != displayHeight) {\n                    canvas.width = displayWidth;\n                    canvas.height = displayHeight;\n                }\n            };\n            resizeCanvas();\n            window.addEventListener(\"resize\", resizeCanvas);\n            return () => {\n                window.removeEventListener(\"resize\", resizeCanvas);\n            };\n        }\n    }, [canvasRef]);\n\n    // 使用webgl绘制\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (canvas && (gameStatus === GameStatus.RUNNING || gameStatus === GameStatus.UNSTART)) {\n            const gl = canvas.getContext(\"webgl2\") as WebGL2RenderingContext;\n            draw(gl);\n        }\n    }, [canvasRef, GameStatus]);\n\n    // 改变webgl绘制所需的数据：cellDatas\n    useEffect(() => {\n        gameRunData.cellDatas = cellDatas;\n    }, [cellDatas]);\n\n    // 改变webgl绘制所需的数据：活动的block类型\n    useEffect(() => {\n        if (activeShape) {\n            gameRunData.activeShape = activeShape;\n        }\n    }, [activeShape]);\n\n    // 改变webgl绘制所需的数据：活动的block的颜色\n    useEffect(() => {\n        gameRunData.activeCubeColor = activeShapeColor;\n    }, [activeShapeColor]);\n\n    // 检测碰撞，更新cellDatas\n    useEffect(() => {\n        // 检测碰撞\n        if (activeShape) {\n            const areaValue = getCellValueByCoord(cellDatas, activeShapeCoord);\n            const crash = activeShape.data & areaValue; // 是否存在碰撞\n            if (crash) {\n                if (activeShapeCoord.y > HEIGHT - 4) {\n                    setGameStatus(GameStatus.OVER);\n                    return;\n                }\n\n                // setRandomShape();\n                setNextRandomShape();\n                // 更新cellDatas\n                const shapeData = gameRunData.activeShape?.data as number;\n                const shapePos = gameRunData.activeShapePos;\n                const updateData = updateCellValueByCoord(cellDatas, shapePos, shapeData);\n                setCellDatas(updateData);\n            } else {\n                gameRunData.activeShapePos = activeShapeCoord;\n            }\n        }\n    }, [activeShapeCoord]);\n\n    // 消除满行，并加分\n    useEffect(() => {\n        if (!flicker) {\n            const eliminateRowIndex: number[] = [];\n            for (let i = 0; i < cellDatas.length; i++) {\n                const curRow = cellDatas[i];\n                const isEliminate = curRow.every((item) => item === 1);\n\n                if (isEliminate) {\n                    eliminateRowIndex.push(i);\n                }\n            }\n\n            if (eliminateRowIndex.length > 0) {\n                let isDraw = false;\n                flicker = true;\n                const intervalId = setInterval(() => {\n                    const data: CellData = JSON.parse(JSON.stringify(cellDatas));\n                    for (let i = 0; i < eliminateRowIndex.length; i++) {\n                        const rowIndex = eliminateRowIndex[i];\n                        data[rowIndex] = Array(WIDTH).fill(isDraw ? 1 : 0);\n                    }\n                    setCellDatas(data);\n                    isDraw = !isDraw;\n                }, 200);\n\n                setTimeout(() => {\n                    clearInterval(intervalId);\n                    const data: CellData = JSON.parse(JSON.stringify(cellDatas));\n                    for (let i = eliminateRowIndex.length - 1; i >= 0; i--) {\n                        const delRowIndex = eliminateRowIndex[i];\n                        data.splice(delRowIndex, 1);\n                    }\n                    for (let i = 0; i < eliminateRowIndex.length; i++) {\n                        data.push(Array(WIDTH).fill(0));\n                    }\n\n                    setScore(score => score += (eliminateRowIndex.length * 10))\n                    setCellDatas(data);\n                    flicker = false;\n                }, 1000);\n            }\n        }\n    }, [cellDatas]);\n\n    // 根据分数设置速度\n    useEffect(() => {\n        if (score <= 100) {\n            setSpeed(1);\n        } else {\n            const speed = Math.ceil(score / 100);\n            setSpeed(Math.min(speed, 11)); // 最大速度限制在11\n        }\n    }, [score]);\n\n    return (\n        <>\n            <canvas className=\"gameCanvas\" ref={canvasRef} />\n            <RealtimeInfo\n                status={gameStatus}\n                setStatus={setGameStatus}\n                nextShape={nextShape}\n                score={score}\n                nextShapeColor={nextShapeColor}\n            />\n        </>\n    );\n};\n\nexport default MainScreen;\n","import React, {FC, useState} from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\nimport SpaceBarIcon from \"@material-ui/icons/SpaceBar\";\nimport \"./index.less\";\nimport {useEffect} from \"react\";\nimport {gameSettings} from \"../mainScreen/util/painter\";\n\nconst settingValue = {\n    distance: {\n        min: 100,\n        max: 500\n    },\n    rotate: {\n        min: 0,\n        max: 360\n    }\n};\n\ninterface SettingProps {\n    open: boolean;\n    setOpen: (open: boolean) => void;\n}\n\nconst Setting: FC<SettingProps> = (props) => {\n    const {open, setOpen} = props;\n    const [distance, setDistance] = useState<number>(200);\n    const [rotate, setRotate] = useState<number>(40);\n\n    useEffect(() => {\n        gameSettings.distance = distance;\n    }, [distance]);\n\n    useEffect(() => {\n        gameSettings.rotateX = rotate;\n    }, [rotate]);\n\n    const distanceChange = (e: React.ChangeEvent<any>, value: number | number[]) => {\n        setDistance(value as number);\n    };\n\n    const rotateChange = (e: React.ChangeEvent<any>, value: number | number[]) => {\n        setRotate(value as number);\n    };\n\n    return (\n        <>\n            <SettingsIcon className=\"setting-icon\" onClick={() => setOpen(true)} />\n            <Drawer className=\"setting-content\" anchor=\"left\" open={open} onClose={() => setOpen(false)}>\n                <h3>SETTING</h3>\n                <div className=\"setting-distance setting-item\">\n                    <h4 className=\"setting-title\">distance</h4>\n                    <div className=\"setting-operator\">\n                        <span className=\"setting-label\">near</span>\n                        <Slider min={settingValue.distance.min} max={settingValue.distance.max} className=\"setting-slider\" value={distance} onChange={distanceChange} aria-labelledby=\"continuous-slider\" />\n                        <span className=\"setting-label\">far</span>\n                    </div>\n                </div>\n                <div className=\"setting-rotate setting-item\">\n                    <h4 className=\"setting-title\">rotate</h4>\n                    <div className=\"setting-operator\">\n                        <span className=\"setting-label\">0</span>\n                        <Slider min={settingValue.rotate.min} max={settingValue.rotate.max} className=\"setting-slider\" value={rotate} onChange={rotateChange} aria-labelledby=\"continuous-slider\" />\n                        <span className=\"setting-label\">360</span>\n                    </div>\n                </div>\n                <h3>CONTROL</h3>\n                <div className=\"game-control\">\n                    <div className=\"control-item\" title=\"Rotate the shape by presss 'key_arrow_up'\">\n                        <ArrowUpwardIcon className=\"icon\" />\n                        <span>Rotate</span>\n                    </div>\n                    <div className=\"control-item\" title=\"Speed up the fall by presss 'key_arrow_down'\">\n                        <ArrowDownwardIcon className=\"icon\" />\n                        <span>Speed Up</span>\n                    </div>\n                    <div className=\"control-item\" title=\"Move left the shape by press 'key_arrow_left'\">\n                        <ArrowBackIcon className=\"icon\" />\n                        <span>Move Left</span>\n                    </div>\n                    <div className=\"control-item\" title=\"Move right the shape by press 'key_arrow_right'\">\n                        <ArrowForwardIcon className=\"icon\" />\n                        <span>Move Right</span>\n                    </div>\n                    <div className=\"control-item\" title=\"Switch game status(stop or start) by press 'key_space'\">\n                        <SpaceBarIcon className=\"icon\" />\n                        <span>Pause Or Continue</span>\n                    </div>\n                </div>\n                <h3>ABOUT</h3>\n                <div className=\"game-info\">\n                    <div className=\"description\">\n                        The game is written in WebGL. You can download sourcecode <a href=\"https://github.com/pengfeiw/3d-tetris\">here</a>.\n                        If you have any questions, you can leave a comment on my website.\n                    </div>\n\n                    <div>\n                        <span className=\"label\">Author:</span>\n                        <span>Wang Pengfei</span>\n                    </div>\n                    <div>\n                        <span className=\"label\">Site:</span>\n                        <span>\n                            <a href=\"http://www.pengfeixc.com\">http://www.pengfeixc.com</a>\n                        </span>\n                    </div>\n                    <div>\n                        <span className=\"label\">MiniCode:</span>\n                        <span>\n                            <a href=\"http://mini.pengfeixc.com\">http://mini.pengfeixc.com</a>\n                        </span>\n                    </div>\n                </div>\n            </Drawer>\n        </>\n    );\n};\n\nexport default Setting;\n","import React, {useState, FC, useEffect} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport PlayCircleFilledWhiteIcon from \"@material-ui/icons/PlayCircleFilledWhite\";\nimport RestartIcon from \"@material-ui/icons/Refresh\";\nimport {GameStatus as Status} from \"../../tetris.interface\";\nimport \"./index.less\";\n\ninterface GameStatusProps {\n    status: Status;\n    setStatus: React.Dispatch<React.SetStateAction<Status>>;\n}\n\nconst getTitle = (status: Status) => {\n    switch (status) {\n        case Status.UNSTART:\n            return \"START\";\n        case Status.PAUSE:\n            return \"PAUSE\";\n        case Status.RUNNING:\n            return \"RUNNING\";\n        case Status.OVER:\n            return \"GAME OVER\";\n        default:\n            return \"\";\n    }\n};\n\nconst GameStatus: FC<GameStatusProps> = (props) => {\n    const {status, setStatus} = props;\n    const [title, setTitle] = useState<string>(\"START\");\n    useEffect(() => {\n        setTitle(getTitle(status));\n    }, [status]);\n\n    const onClick = () => {\n        setStatus(Status.RUNNING);\n    };\n\n    return (\n        <Paper className={status === Status.RUNNING ? \"gameStatus none\" : \"gameStatus\"}>\n            <div className=\"title\">\n                {title}\n            </div>\n            <div className=\"icon\" onClick={onClick}>\n                {\n                    status === Status.OVER ? <RestartIcon /> : <PlayCircleFilledWhiteIcon />\n                }\n            </div>\n        </Paper>\n    );\n};\n\nexport default GameStatus;\n","import React, {useState, useEffect} from \"react\";\nimport MainScreen from \"./components/mainScreen\";\nimport Setting from \"./components/setting\";\nimport GameStatusPanel from \"./components/gameStatus\";\nimport {GameStatus} from \"./tetris.interface\";\nimport \"./app.less\";\n\nconst Tetris = ():JSX.Element => {\n    const [status, setStatus] = useState<GameStatus>(GameStatus.UNSTART);\n    const [score, setScore] = useState<number>(0); // 分数\n    const [settingOpen, setSettingOpen] = useState<boolean>(false);\n\n    // 监听暂停或者开始事件\n    useEffect(() => {\n        const listener = (event: KeyboardEvent) => {\n            if (event.key === \" \") {\n                setStatus(status => {\n                    switch (status) {\n                        case GameStatus.UNSTART:\n                        case GameStatus.OVER:\n                        case GameStatus.PAUSE:\n                            return GameStatus.RUNNING;\n                        case GameStatus.RUNNING:\n                            return GameStatus.PAUSE;\n                        default:\n                            throw new Error(`unimplement game status: ${status}.`);\n                    }\n                });\n            }\n        };\n        window.addEventListener(\"keydown\", listener);\n\n        return () => {\n            window.removeEventListener(\"keydown\", listener);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (status === GameStatus.RUNNING) {\n            setSettingOpen(false);\n        }\n    }, [status]);\n\n    const handleSettingOpen = (open: boolean) => {\n        setSettingOpen(open);\n        if (open && status === GameStatus.RUNNING) {\n            setStatus(GameStatus.PAUSE);\n        }\n    };\n\n    return (\n        <div className=\"tetris\">\n            <MainScreen gameStatus={status} setGameStatus={setStatus} score={score} setScore={setScore} />\n            <Setting open={settingOpen} setOpen={handleSettingOpen} />\n            {\n                settingOpen ? <></> :\n                <GameStatusPanel status={status} setStatus={setStatus} />\n            }\n        </div>\n    );\n};\n\nexport default Tetris;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}